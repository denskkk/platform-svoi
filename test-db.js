// –¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testDatabase() {
  try {
    console.log('üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');
    
    // –¢–µ—Å—Ç 1: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    await prisma.$connect();
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!');
    
    // –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å
    const userCount = await prisma.user.count();
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü—è User —ñ—Å–Ω—É—î. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${userCount}`);
    
    const categoryCount = await prisma.category.count();
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü—è Category —ñ—Å–Ω—É—î. –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: ${categoryCount}`);
    
    // –¢–µ—Å—Ç 3: –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤–∏–¥–∞–ª–∏–º–æ –ø—ñ—Å–ª—è)
    console.log('\nüìù –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
    
    const testEmail = `test-${Date.now()}@test.com`;
    const testUser = await prisma.user.create({
      data: {
        email: testEmail,
        firstName: 'Test',
        lastName: 'User',
        passwordHash: 'test_hash_12345678',
        role: 'user',
      }
    });
    
    console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π! ID: ${testUser.id}`);
    
    // –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await prisma.user.delete({
      where: { id: testUser.id }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–µ–Ω–∏–π');
    
    console.log('\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ! –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ.');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
    console.error('\n–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:');
    console.error(error);
  } finally {
    await prisma.$disconnect();
  }
}

testDatabase();
