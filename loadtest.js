/**
 * –ü—Ä–æ—Å—Ç–∏–π load test –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ 100+ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node loadtest.js
 */

const API_URL = 'http://localhost:3000';
const CONCURRENT_USERS = 100;
const REQUESTS_PER_USER = 5;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
async function makeRequest(userId) {
  const endpoints = [
    '/api/health',
    '/api/services?page=1&limit=10',
    '/api/services?city=–ö–∏—ó–≤',
    '/api/categories',
  ];

  const endpoint = endpoints[Math.floor(Math.random() * endpoints.length)];
  const startTime = Date.now();

  try {
    const response = await fetch(`${API_URL}${endpoint}`);
    const duration = Date.now() - startTime;
    
    return {
      success: response.ok,
      status: response.status,
      duration,
      endpoint,
      userId,
    };
  } catch (error) {
    return {
      success: false,
      error: error.message,
      duration: Date.now() - startTime,
      endpoint,
      userId,
    };
  }
}

// –°–∏–º—É–ª—é—î–º–æ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function simulateUser(userId) {
  const results = [];
  
  for (let i = 0; i < REQUESTS_PER_USER; i++) {
    const result = await makeRequest(userId);
    results.push(result);
    
    // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (—Å–∏–º—É–ª—è—Ü—ñ—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
    await new Promise(resolve => setTimeout(resolve, Math.random() * 1000));
  }
  
  return results;
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è load test
async function runLoadTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ load test...');
  console.log(`üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${CONCURRENT_USERS}`);
  console.log(`üìä –ó–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${REQUESTS_PER_USER}`);
  console.log(`üìà –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤: ${CONCURRENT_USERS * REQUESTS_PER_USER}\n`);

  const startTime = Date.now();

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
  const userPromises = [];
  for (let i = 1; i <= CONCURRENT_USERS; i++) {
    userPromises.push(simulateUser(i));
  }

  const allResults = await Promise.all(userPromises);
  const flatResults = allResults.flat();

  const totalDuration = Date.now() - startTime;

  // –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  const successful = flatResults.filter(r => r.success).length;
  const failed = flatResults.filter(r => !r.success).length;
  const durations = flatResults.map(r => r.duration);
  const avgDuration = durations.reduce((a, b) => a + b, 0) / durations.length;
  const maxDuration = Math.max(...durations);
  const minDuration = Math.min(...durations);

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
  const statusCounts = {};
  flatResults.forEach(r => {
    if (r.status) {
      statusCounts[r.status] = (statusCounts[r.status] || 0) + 1;
    }
  });

  // –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò LOAD TEST:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: ${successful} (${(successful / flatResults.length * 100).toFixed(1)}%)`);
  console.log(`‚ùå –ù–µ–≤–¥–∞–ª–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: ${failed} (${(failed / flatResults.length * 100).toFixed(1)}%)`);
  console.log(`‚è±Ô∏è  –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: ${(totalDuration / 1000).toFixed(2)}s`);
  console.log(`üìà RPS (requests/sec): ${(flatResults.length / (totalDuration / 1000)).toFixed(2)}`);
  console.log('\n‚è∞ –ß–ê–° –í–Ü–î–ü–û–í–Ü–î–Ü:');
  console.log(`   –°–µ—Ä–µ–¥–Ω—ñ–π: ${avgDuration.toFixed(0)}ms`);
  console.log(`   –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π: ${minDuration}ms`);
  console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π: ${maxDuration}ms`);
  
  console.log('\nüìã HTTP –°–¢–ê–¢–£–°–ò:');
  Object.entries(statusCounts).forEach(([status, count]) => {
    console.log(`   ${status}: ${count} –∑–∞–ø–∏—Ç—ñ–≤`);
  });

  // –û—Ü—ñ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
  console.log('\nüéØ –û–¶–Ü–ù–ö–ê:');
  if (failed === 0 && avgDuration < 1000) {
    console.log('   ‚úÖ –í–Ü–î–ú–Ü–ù–ù–û! –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è 100+ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
  } else if (failed < flatResults.length * 0.05 && avgDuration < 2000) {
    console.log('   ‚ö†Ô∏è  –î–û–ë–†–ï, –∞–ª–µ —î –ø—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è');
  } else {
    console.log('   ‚ùå –ü–û–¢–†–ï–ë–£–Ñ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á');
  }

  // –ü–æ–º–∏–ª–∫–∏ (—è–∫—â–æ —î)
  if (failed > 0) {
    console.log('\n‚ùå –ü–û–ú–ò–õ–ö–ò:');
    flatResults
      .filter(r => !r.success)
      .slice(0, 5)
      .forEach(r => {
        console.log(`   ${r.endpoint}: ${r.error || `Status ${r.status}`}`);
      });
    if (failed > 5) {
      console.log(`   ... —Ç–∞ —â–µ ${failed - 5} –ø–æ–º–∏–ª–æ–∫`);
    }
  }
}

// –ó–∞–ø—É—Å–∫
runLoadTest().catch(console.error);
