// ========================================
// СВІЙ ДЛЯ СВОЇХ - Prisma Schema
// ========================================
// Prisma ORM для Next.js інтеграції
// База даних: PostgreSQL
// ========================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS
// ========================================

enum UserRole {
  user
  business
  viewer
  admin
}

enum Gender {
  male
  female
  other
}

enum ReportStatus {
  new
  in_review
  resolved
  rejected
}

// ========================================
// MODELS
// ========================================

model User {
  id           Int      @id @default(autoincrement()) @map("user_id")
  role         UserRole @default(user)
  
  // Основна інформація
  firstName    String   @map("first_name") @db.VarChar(100)
  middleName   String?  @map("middle_name") @db.VarChar(100)
  lastName     String   @map("last_name") @db.VarChar(100)
  email        String   @unique @db.VarChar(150)
  phone        String?  @db.VarChar(30)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  
  // Локація
  city         String   @db.VarChar(100)
  region       String?  @db.VarChar(100)
  housingType  String?  @map("housing_type") @db.VarChar(50) // будинок / квартира / інше
  livingSituation String? @map("living_situation") @db.VarChar(100) // самостійно / з родиною
  
  // Персональна інформація
  gender       Gender?
  age          Int?
  maritalStatus String? @map("marital_status") @db.VarChar(50) // одружений / неодружений / у стосунках / розлучений
  familyComposition String? @map("family_composition") @db.Text // склад сім'ї
  childrenCount Int?    @map("children_count") // кількість дітей
  bio          String?  @db.Text
  avatarUrl    String?  @map("avatar_url") @db.VarChar(255)
  
  // Транспорт
  hasCar       Boolean? @map("has_car")
  carInfo      String?  @map("car_info") @db.VarChar(200) // марка, модель
  otherTransport String? @map("other_transport") @db.VarChar(200) // велосипед / самокат
  
  // Професійна діяльність
  profession   String?  @db.VarChar(200)
  employmentStatus String? @map("employment_status") @db.VarChar(100) // працюю / не працюю / студент / пенсіонер
  workplace    String?  @db.VarChar(255)
  education    String?  @db.Text // освіта, спеціальність, заклад
  privateBusinessInfo String?  @map("business_info") @db.Text // інфо про приватний бізнес
  jobSeeking   String?  @map("job_seeking") @db.Text // в якій сфері шукає роботу
  
  // Домашні тварини
  hasPets      Boolean? @map("has_pets")
  petsInfo     String?  @map("pets_info") @db.VarChar(255) // які тварини
  
  // Інтереси та стиль життя
  hobbies      String?  @db.Text // хобі, захоплення
  outdoorActivities String? @map("outdoor_activities") @db.Text // охота, рибалка, спорт
  lifestyle    String?  @db.Text // кафе, ресторани, подорожі
  sports       String?  @db.Text // спортивна активність
  
  // Соцмережі
  socialLinks  Json?    @map("social_links") @default("{}") // Instagram, Facebook, Telegram, TikTok
  
  // Рейтинг
  avgRating    Decimal  @default(0.00) @map("avg_rating") @db.Decimal(3, 2)
  totalReviews Int      @default(0) @map("total_reviews")
  
  // Метадані
  isVerified   Boolean  @default(false) @map("is_verified")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastLogin    DateTime? @map("last_login")
  
  // Зв'язки
  services           Service[]
  businessInfo       BusinessInfo?
  reviewsGiven       Review[]      @relation("ReviewerRelation")
  reviewsReceived    Review[]      @relation("ReviewedRelation")
  messagesSent       Message[]     @relation("SenderRelation")
  messagesReceived   Message[]     @relation("ReceiverRelation")
  favorites          Favorite[]    @relation("UserFavorites")
  favoritedBy        Favorite[]    @relation("TargetUser")
  reportsCreated     Report[]      @relation("Reporter")
  reportsReceived    Report[]      @relation("ReportedUser")
  notifications      Notification[]
  sessions           Session[]
  searchLogs         SearchLog[]
  
  @@index([email])
  @@index([city])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Category {
  id          Int       @id @default(autoincrement()) @map("category_id")
  name        String    @unique @db.VarChar(100)
  slug        String    @unique @db.VarChar(100)
  iconUrl     String?   @map("icon_url") @db.VarChar(255)
  emoji       String?   @db.VarChar(10)
  description String?   @db.Text
  isActive    Boolean   @default(true) @map("is_active")
  sortOrder   Int       @default(0) @map("sort_order")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Зв'язки
  services    Service[]
  searchLogs  SearchLog[]
  
  @@index([slug])
  @@index([isActive])
  @@map("categories")
}

model Service {
  id          Int      @id @default(autoincrement()) @map("service_id")
  userId      Int      @map("user_id")
  categoryId  Int      @map("category_id")
  
  // Основна інформація
  title       String   @db.VarChar(150)
  description String   @db.Text
  
  // Зображення
  imageUrl    String?  @map("image_url") @db.VarChar(500)
  images      Json?    @default("[]")
  
  // Ціна
  priceFrom   Decimal? @map("price_from") @db.Decimal(10, 2)
  priceTo     Decimal? @map("price_to") @db.Decimal(10, 2)
  priceUnit   String?  @map("price_unit") @db.VarChar(50)
  
  // Локація
  city        String   @db.VarChar(100)
  region      String?  @db.VarChar(100)
  address     String?  @db.VarChar(255)
  
  // Статус
  isActive    Boolean  @default(true) @map("is_active")
  viewsCount  Int      @default(0) @map("views_count")
  
  // Метадані
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Зв'язки
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id])
  
  @@index([userId])
  @@index([categoryId])
  @@index([city])
  @@index([isActive])
  @@index([createdAt(sort: Desc)])
  @@index([priceFrom])
  @@index([title]) // Для швидкого пошуку за назвою
  @@index([city, categoryId]) // Композитний індекс для фільтрації
  @@index([isActive, createdAt(sort: Desc)]) // Для головної сторінки
  @@map("services")
}

model BusinessInfo {
  id            Int      @id @default(autoincrement()) @map("business_id")
  userId        Int      @unique @map("user_id")
  
  // Основна інформація
  companyName   String   @map("company_name") @db.VarChar(200)
  representativeName String? @map("representative_name") @db.VarChar(200) // ПІБ представника
  position      String?  @db.VarChar(100) // Посада (власник / менеджер)
  city          String?  @db.VarChar(100) // Місто діяльності
  region        String?  @db.VarChar(100) // Регіон діяльності
  businessType  String?  @map("business_type") @db.VarChar(200) // Тип бізнесу / сфера
  
  logoUrl       String?  @map("logo_url") @db.VarChar(255)
  
  // Короткий опис
  description   String?  @db.Text // Що пропонуєте
  mission       String?  @db.Text // Основна місія / цінність
  uniqueValue   String?  @map("unique_value") @db.Text // Чим відрізняєтесь
  
  // Послуги та товари
  servicesList  String?  @map("services_list") @db.Text // Список послуг
  priceRange    String?  @map("price_range") @db.VarChar(100) // мінімальна/середня/преміум
  workHours     String?  @map("work_hours") @db.VarChar(200) // Графік роботи
  serviceLocation String? @map("service_location") @db.VarChar(255) // Адреса або онлайн
  address       String?  @db.VarChar(255)
  
  // Команда
  employeeCount String?  @map("employee_count") @db.VarChar(50)
  keySpecialists String? @map("key_specialists") @db.Text // Ключові спеціалісти
  teamDescription String? @map("team_description") @db.Text // Опис команди
  
  // Контакти
  phone         String?  @db.VarChar(30)
  viber         String?  @db.VarChar(100)
  telegram      String?  @db.VarChar(100)
  email         String?  @db.VarChar(150)
  website       String?  @db.VarChar(255)
  
  // Соцмережі (JSON)
  socialLinks   Json     @default("{}") @map("social_links") // Instagram, Facebook, TikTok, YouTube, LinkedIn
  
  // Візуальні матеріали (JSON)
  gallery       Json     @default("[]") // Фото робіт / послуг / офісу
  videoUrl      String?  @map("video_url") @db.VarChar(255) // Відео-презентація
  
  // Відгуки (зовнішні посилання)
  externalReviews Json?  @map("external_reviews") @default("{}") // Google, Facebook links
  
  // Додаткова інформація
  yearFounded   Int?     @map("year_founded")
  registrationType String? @map("registration_type") @db.VarChar(50) // ФОП / ТОВ
  hasCertificates Boolean? @map("has_certificates") // Наявність сертифікатів
  certificatesInfo String? @map("certificates_info") @db.Text // Опис сертифікатів
  partners      String?  @db.Text // Партнери або членство
  
  // Метадані
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Зв'язки
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([city])
  @@index([businessType])
  @@map("business_info")
}

model Review {
  id         Int      @id @default(autoincrement()) @map("review_id")
  reviewerId Int      @map("reviewer_id")
  reviewedId Int      @map("reviewed_id")
  
  // Оцінка
  rating     Int
  comment    String?  @db.Text
  photos     Json     @default("[]")
  
  // Метадані
  isVisible  Boolean  @default(true) @map("is_visible")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  // Зв'язки
  reviewer   User     @relation("ReviewerRelation", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewed   User     @relation("ReviewedRelation", fields: [reviewedId], references: [id], onDelete: Cascade)
  
  @@unique([reviewerId, reviewedId])
  @@index([reviewerId])
  @@index([reviewedId])
  @@index([rating])
  @@index([createdAt(sort: Desc)])
  @@map("reviews")
}

model Message {
  id                   Int      @id @default(autoincrement()) @map("message_id")
  senderId             Int      @map("sender_id")
  receiverId           Int      @map("receiver_id")
  
  // Контент
  text                 String   @db.Text
  attachmentUrl        String?  @map("attachment_url") @db.VarChar(255)
  attachmentType       String?  @map("attachment_type") @db.VarChar(50)
  
  // Статус
  isRead               Boolean  @default(false) @map("is_read")
  isDeletedBySender    Boolean  @default(false) @map("is_deleted_by_sender")
  isDeletedByReceiver  Boolean  @default(false) @map("is_deleted_by_receiver")
  
  // Метадані
  createdAt            DateTime @default(now()) @map("created_at")
  readAt               DateTime? @map("read_at")
  
  // Зв'язки
  sender               User     @relation("SenderRelation", fields: [senderId], references: [id], onDelete: Cascade)
  receiver             User     @relation("ReceiverRelation", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt(sort: Desc)])
  @@index([receiverId, isRead])
  @@index([senderId, receiverId, createdAt(sort: Desc)])
  @@map("messages")
}

model Favorite {
  id           Int      @id @default(autoincrement()) @map("favorite_id")
  userId       Int      @map("user_id")
  targetUserId Int      @map("target_user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Зв'язки
  user         User     @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)
  targetUser   User     @relation("TargetUser", fields: [targetUserId], references: [id], onDelete: Cascade)
  
  @@unique([userId, targetUserId])
  @@index([userId])
  @@index([targetUserId])
  @@map("favorites")
}

model Report {
  id             Int          @id @default(autoincrement()) @map("report_id")
  reporterId     Int          @map("reporter_id")
  reportedUserId Int          @map("reported_user_id")
  
  // Деталі
  reason         String       @db.Text
  category       String?      @db.VarChar(100)
  
  // Статус
  status         ReportStatus @default(new)
  adminComment   String?      @map("admin_comment") @db.Text
  adminId        Int?         @map("admin_id")
  
  // Метадані
  createdAt      DateTime     @default(now()) @map("created_at")
  resolvedAt     DateTime?    @map("resolved_at")
  
  // Зв'язки
  reporter       User         @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
  
  @@index([reporterId])
  @@index([reportedUserId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("reports")
}

model Notification {
  id                Int      @id @default(autoincrement()) @map("notification_id")
  userId            Int      @map("user_id")
  
  // Контент
  type              String   @db.VarChar(50)
  title             String   @db.VarChar(200)
  message           String?  @db.Text
  
  // Пов'язані дані
  relatedUserId     Int?     @map("related_user_id")
  relatedEntityType String?  @map("related_entity_type") @db.VarChar(50)
  relatedEntityId   Int?     @map("related_entity_id")
  
  // Статус
  isRead            Boolean  @default(false) @map("is_read")
  
  // Метадані
  createdAt         DateTime @default(now()) @map("created_at")
  readAt            DateTime? @map("read_at")
  
  // Зв'язки
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([userId, isRead])
  @@index([createdAt(sort: Desc)])
  @@map("notifications")
}

model Session {
  id               String   @id @default(uuid()) @map("session_id") @db.Uuid
  userId           Int      @map("user_id")
  
  // Токени
  tokenHash        String   @unique @map("token_hash") @db.VarChar(255)
  refreshTokenHash String?  @map("refresh_token_hash") @db.VarChar(255)
  
  // Метадані пристрою
  userAgent        String?  @map("user_agent") @db.Text
  ipAddress        String?  @map("ip_address") @db.VarChar(45)
  
  // Час життя
  createdAt        DateTime @default(now()) @map("created_at")
  expiresAt        DateTime @map("expires_at")
  lastActivity     DateTime @default(now()) @map("last_activity")
  
  // Статус
  isActive         Boolean  @default(true) @map("is_active")
  
  // Зв'язки
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
  @@index([isActive])
  @@map("sessions")
}

model SearchLog {
  id           Int       @id @default(autoincrement()) @map("search_id")
  userId       Int?      @map("user_id")
  
  // Параметри пошуку
  query        String?   @db.Text
  categoryId   Int?      @map("category_id")
  city         String?   @db.VarChar(100)
  
  // Результати
  resultsCount Int       @default(0) @map("results_count")
  
  // Метадані
  createdAt    DateTime  @default(now()) @map("created_at")
  ipAddress    String?   @map("ip_address") @db.VarChar(45)
  
  // Зв'язки
  user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  category     Category? @relation(fields: [categoryId], references: [id])
  
  @@index([userId])
  @@index([createdAt(sort: Desc)])
  @@index([query])
  @@map("search_logs")
}

model City {
  id            Int     @id @default(autoincrement()) @map("city_id")
  name          String  @unique @db.VarChar(100)
  nameEn        String? @map("name_en") @db.VarChar(100)
  region        String? @db.VarChar(100)
  
  // Координати
  latitude      Decimal? @db.Decimal(10, 8)
  longitude     Decimal? @db.Decimal(11, 8)
  
  // Статистика
  usersCount    Int     @default(0) @map("users_count")
  servicesCount Int     @default(0) @map("services_count")
  
  isActive      Boolean @default(true) @map("is_active")
  
  @@index([name])
  @@index([region])
  @@map("cities")
}
